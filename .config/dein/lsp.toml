[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
imap <C-k> <Plug>(neosnippet_jump_or_expand)
smap <C-k> <Plug>(neosnippet_jump_or_expand)
xmap <C-k> <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#expand_word_boundary = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
let g:neosnippet#snippets_directory = '$HOME/.config/nvim/snippets'
'''

[[plugins]]
repo = 'honza/vim-snippets'


[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
repo='prabirshrestha/vim-lsp'
hook_add='''
let g:lsp_virtual_text_enabled = 0
if executable('gopls')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'go-lang',
      \ 'cmd': {server_info->['gopls']},
      \ 'whitelist': ['go'],
      \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    autocmd FileType go nmap <buffer> ,n <plug>(lsp-next-error)
    autocmd FileType go nmap <buffer> ,p <plug>(lsp-previous-error)
  augroup END
endif

if executable('vls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'vls',
    \ 'cmd': {server_info->['vls']},
    \ 'whitelist': ['vue'],
    \ })
endif

if executable('solargraph')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'solargraph',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
    \ 'initialization_options': {"diagnostics": "true"},
    \ 'whitelist': ['ruby'],
    \ })
endif

if executable('yaml-language-server')
  let settings = json_decode('
  \{
  \    "yaml": {
  \        "completion": false,
  \        "hover": true,
  \        "validate": true,
  \        "schemas": {
  \            "Kubernetes": "/*"
  \        },
  \        "format": {
  \            "enable": true
  \        }
  \    },
  \    "http": {
  \        "proxyStrictSSL": true
  \    }
  \}')

  au User lsp_config call lsp#register_notifications(
    \ 'workspace/didChangeConfiguration', {'settings': settings})
  au User lsp_setup call lsp#register_server({
    \ 'name': 'yaml-language-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'yaml-language-server --stdio']},
    \ 'whitelist': ['yaml'],
    \ })
endif

if executable('docker-langserver')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'docker-language-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
    \ 'whitelist': ['dockerfile'],
    \ })
endif

let g:lsp_signs_enabled = 1     " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
nmap <silent> <Leader>d :LspDefinition<CR>
nmap <silent> <Leader>h :LspHover<CR>
nmap <silent> <Leader>R :LspReferences<CR>
nmap <silent> <Leader>r :LspRename<CR>
nmap <silent> <Leader>i :LspImplementation<CR>
nmap <silent> <Leader>s :split \| :LspDefinition <CR>
nmap <silent> <Leader>v :vsplit \| :LspDefinition <CR>
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
hook_add = '''
let g:lsp_async_completion = 1
set shortmess+=c
'''

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['asyncomplete.vim']
hook_add='''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
  \ 'name': 'neosnippet',
  \ 'whitelist': ['*'],
  \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
  \ }))
imap <C-k>   <Plug>(neosnippet_expand_or_jump)
smap <C-k>   <Plug>(neosnippet_expand_or_jump)
xmap <C-k>   <Plug>(neosnippet_expand_target)
'''
