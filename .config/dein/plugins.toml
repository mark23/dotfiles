[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # status line
repo = 'itchyny/lightline.vim'
depends_on = 'lightline-ale'
hook_add = '''
let g:lightline = {
    \ 'colorscheme': 'tender',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename','modified' ] ],
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename',
    \   'gitbranch': 'Fugitive'
    \ },
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
    \ [ 'lineinfo' ],
    \ [ 'percent' ],
    \ [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ] }
let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"


function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! Fugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'

[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
hook_post_update = '''
if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends_on = 'vimproc.vim'
hook_add = '''
nmap <Leader>q :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
    \ 'runner'    : 'vimproc',
    \ 'runner/vimproc/updatetime' : 60,
    \ 'outputter/buffer/split'  : ':rightbelow 18sp',
    \ 'outputter/buffer/close_on_empty' : 1,
    \ 'hook/time/enable': 1
    \ }

" for bundler
let g:quickrun_config['minitest/bundle'] = {
  \ 'type': 'rspec/bundle',
  \ 'command': 'ruby',
  \ 'exec': 'bundle exec %c %s'
  \}

nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
au FileType qf nnoremap <silent><buffer>q :quit<CR>

function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'minitest/bundle'}
endfunction
autocmd BufReadPost *_test.rb call RSpecQuickrun()
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_python_pylint_use_global = 1
let g:ale_python_flake8_use_global = 1
let g:ale_fixers = {
\  'ruby': ['rubocop'],
\  'python': ['autopep8', 'yapf']
\}
nmap <F3> <Plug>(ale_fix)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

#[[plugins]]
#repo = 'scrooloose/nerdtree'
#hook_add = '''
#map <C-n> :NERDTreeToggle<CR>
#'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = '''
map <C-p> :VimShellPop<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
'''

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Json
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]] # ansible
repo = 'pearofducks/ansible-vim'
on_ft =  ['ansible', 'yaml', 'yml']

[[plugins]] # jinaj2
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = 'j2'

[[plugins]] # mustache
repo = 'juvenn/mustache.vim'
on_ft = 'mustache'

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
    set helplang=ja,en
'''

# Colors
#[[plugins]]
#repo = 'dracula/vim'
#hook_add = '''
#    if (has("termguicolors"))
#     set termguicolors
#    endif
#    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#    au MyAutoCmd VimEnter * nested colorscheme dracula
#'''

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
    if (has("termguicolors"))
     set termguicolors
    endif
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    au MyAutoCmd VimEnter * nested colorscheme tender
'''

#[[plugins]]
#repo = 'rakr/vim-one'
#hook_add = '''
#    if (has("termguicolors"))
#     set termguicolors
#    endif
#    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#    set background=dark
#    au MyAutoCmd VimEnter * nested colorscheme one
#'''

#[[plugins]]
#repo = 'ayu-theme/ayu-vim'
#hook_add = '''
#    set termguicolors
#    let ayucolor="mirage"
#    au MyAutoCmd VimEnter * nested colorscheme ayu
#'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']
highlight ExtraWhitespace ctermbg=red
autocmd BufEnter * EnableStripWhitespaceOnSave
let g:better_whitespace_verbosity=1
'''
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''
# tag
[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1

nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'xolox/vim-easytags'
depends_on = 'vim-misc'
hook_add = '''
let g:easytags_file = '~/.cache/vimtags'
'''

[[plugins]]
repo = 'nekottyo/tagbar'
depends = 'vim-tags'
hook_add = '''
autocmd VimEnter * nested :call tagbar#autoopen(1)
autocmd BufWritePost *.rb !ripper-tags -R --exclude=vendor
nmap <F8> :TagbarToggle<CR>

if executable('ripper-tags')
  let g:tagbar_type_ruby = {
      \ 'kinds'      : ['m:modules',
                      \ 'c:classes',
                      \ 'C:constants',
                      \ 'F:singleton methods',
                      \ 'f:methods',
                      \ 'a:aliases'],
      \ 'kind2scope' : { 'c' : 'class',
                       \ 'm' : 'class' },
      \ 'scope2kind' : { 'class' : 'c' },
      \ 'ctagsbin'   : 'ripper-tags',
      \ 'ctagsargs'  : ['--exclude=vendor', '-f', '-']
      \ }
endif
'''

[[plugins]]
repo = "ozelentok/denite-gtags"
hook_add = '''
nnoremap ta :DeniteCursorWord -buffer-name=gtags_context gtags_context<cr>
nnoremap td :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
nnoremap tr :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
nnoremap tg :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<cr>
nnoremap tt :Denite -buffer-name=gtags_completion gtags_completion<cr>
nnoremap tf :Denite -buffer-name=gtags_file gtags_file<cr>
nnoremap tp :Denite -buffer-name=gtags_path gtags_path<cr>
'''

# コメントアウト
[[plugins]]
repo = "tyru/caw.vim"
hook_add = '''
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'

[[plugins]]
repo = 'chr4/nginx.vim'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
inoremap <C-f> <C-r>=lexima#insmode#leave(1, '<LT>C-G>U<LT>RIGHT>')<CR>

" 後ろに文字がある時はタグ補完をしない
call lexima#add_rule({'at': '\%#[-0-9a-zA-Z_,:]', 'char': '{', 'input': '{'})
call lexima#add_rule({'at': '\%#[-0-9a-zA-Z_,:]', 'char': '[', 'input': '['})
call lexima#add_rule({'at': '\%#[-0-9a-zA-Z_,:]', 'char': '(', 'input': '('})

call lexima#add_rule({'at': '\%#[-0-9a-zA-Z_,:\{\[]', 'char': '"', 'input': '"'})
call lexima#add_rule({'at': '[-0-9a-zA-Z_,:\}\]]\%#', 'char': '"', 'input': '"'})

call lexima#add_rule({'at': '\%#[-0-9a-zA-Z_,:\{\[]', 'char': "'", 'input': "'"})
call lexima#add_rule({'at': '[-0-9a-zA-Z_,:\}\]]\%#', 'char': "'", 'input': "'"})

" TAB で閉じカッコの後ろに行く
call lexima#add_rule({'char': '<TAB>', 'at': '\%#)', 'leave': 1})
call lexima#add_rule({'char': '<TAB>', 'at': '\%#"', 'leave': 1})
call lexima#add_rule({'char': '<TAB>', 'at': "\%#'", 'leave': 1})
call lexima#add_rule({'char': '<TAB>', 'at': '\%#]', 'leave': 1})
call lexima#add_rule({'char': '<TAB>', 'at': '\%#}', 'leave': 1})

" for erb
call lexima#add_rule({'char': '<', 'input_after': '>', 'filetype': 'eruby'})
call lexima#add_rule({'char': '>', 'at': '\%#>', 'leave': 1, 'filetype': 'eruby'})
call lexima#add_rule({'char': '<BS>', 'at': '<\%#>', 'delete': 1, 'filetype': 'eruby'})

call lexima#add_rule({'char': '%', 'input_after': '%', 'filetype': 'eruby'})
call lexima#add_rule({'char': '%', 'at': '\%#%', 'leave': 1, 'filetype': 'eruby'})
call lexima#add_rule({'char': '<BS>', 'at': '%\%#%', 'delete': 1, 'filetype': 'eruby'})
'''

# show diff
[[plugins]]
repo = 'airblade/vim-gitgutter'

# vim git
[[plugins]]
repo = 'cohama/agit.vim'

# html5 highlight
[[plugins]]
repo = 'othree/html5.vim'

# 辞書
[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'
depends_on = 'vim-ref'

[[plugins]]
repo = 'nelstrom/vim-visual-star-search'

# 記号を揃えたり出来る
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'justincampbell/vim-eighties'
hook_post_update = '''
let g:eighties_enabled = 1
let g:eighties_minimum_width = 80
let g:eighties_extra_width = 0 " Increase this if you want some extra room
let g:eighties_compute = 1 " Disable this if you just want the minimum + extra
let g:eighties_bufname_additional_patterns = [''] " Defaults to [], 'fugitiveblame' is only an example. Takes a comma delimited list of bufnames as strings.
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
	let g:rainbow_conf = {
	\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
	\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	\	'operators': '_,_',
	\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
	\	'separately': {
	\		'*': {},
	\		'tex': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
	\		},
	\		'lisp': {
	\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
	\		},
	\		'vim': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
	\		},
	\		'html': {
	\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
	\		},
	\		'css': 0,
	\	}
	\}
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
depends_on = ['incsearch.vim', 'incsearch-easymotion.vim', 'incsearch-fuzzy.vim']
hook_add = '''
let g:EasyMotion_do_mapping = 0

" s{char}{char} to move to {char}{char}
nmap f <Plug>(easymotion-overwin-f2)

" Move to line
map fL <Plug>(easymotion-bd-jk)
nmap fL <Plug>(easymotion-overwin-line)

" Move to word
map  w <Plug>(easymotion-bd-w)
nmap w <Plug>(easymotion-overwin-w)

function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())
'''

[[plugins]]
repo = 'blueyed/vim-diminactive'
hook_add = '''
let g:diminactive_enable_focus = 1
'''

