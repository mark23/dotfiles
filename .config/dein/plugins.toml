[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # status line
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
    \ 'colorscheme': 'tender',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename','modified' ] ],
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename',
    \   'gitbranch': 'fugitive#head'
    \ },
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
hook_post_update = '''
if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends_on = 'vimproc.vim'
hook_add = '''
nmap <Leader>q :QuickRun<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
    \ 'runner'    : 'vimproc',
    \ 'runner/vimproc/updatetime' : 60,
    \ 'outputter/buffer/split'  : ':rightbelow 18sp',
    \ 'outputter/buffer/close_on_empty' : 1,
    \ 'hook/time/enable': 1
    \ }

" for bundler
let g:quickrun_config['minitest/bundle'] = {
  \ 'type': 'rspec/bundle',
  \ 'command': 'ruby',
  \ 'exec': 'bundle exec %c %s'
  \}

nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
au FileType qf nnoremap <silent><buffer>q :quit<CR>

function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'minitest/bundle'}
endfunction
autocmd BufReadPost *_test.rb call RSpecQuickrun()
'''

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
let g:neomake_python_enabled_makers = ['flake8', 'pycodestyle']
let g:neomake_ruby_enabled_makers = ['rubocop']
autocmd! BufWritePost * Neomake
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = '''
map <C-p> :VimShellPop<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
'''

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Json
repo = 'elzr/vim-json'
on_ft = 'json'

#[[plugins]] # ansible
#repo = 'chase/vim-ansible-yaml'
#on_ft =  ['ansible', 'yaml', 'yml']

[[plugins]] # ansible
repo = 'pearofducks/ansible-vim'
on_ft =  ['ansible', 'yaml', 'yml']

[[plugins]] # jinaj2
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = 'j2'

[[plugins]] # mustache
repo = 'juvenn/mustache.vim'
on_ft = 'mustache'

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
    set helplang=ja,en
'''

# Colors
#[[plugins]]
#repo = 'dracula/vim'
#hook_add = '''
#    if (has("termguicolors"))
#     set termguicolors
#    endif
#    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#    au MyAutoCmd VimEnter * nested colorscheme dracula
#'''

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
    if (has("termguicolors"))
     set termguicolors
    endif
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    au MyAutoCmd VimEnter * nested colorscheme tender
'''

#[[plugins]]
#repo = 'rakr/vim-one'
#hook_add = '''
#    if (has("termguicolors"))
#     set termguicolors
#    endif
#    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#    set background=dark
#    au MyAutoCmd VimEnter * nested colorscheme one
#'''

#[[plugins]]
#repo = 'ayu-theme/ayu-vim'
#hook_add = '''
#    set termguicolors
#    let ayucolor="mirage"
#    au MyAutoCmd VimEnter * nested colorscheme ayu
#'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']
highlight ExtraWhitespace ctermbg=red
autocmd BufEnter * EnableStripWhitespaceOnSave
let g:better_whitespace_verbosity=1
'''
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = 'majutsushi/tagbar'
depends = 'vim-tags'
hook_add = '''
autocmd VimEnter * nested :call tagbar#autoopen(1)
'''

# コメントアウト
[[plugins]]
repo = "tyru/caw.vim"
hook_add = '''
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

# markdown
[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'md']
depends = ['tabular']
hook_add = '''
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = 'markdown'

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'pocari/vim-denite-emoji'

[[plugins]]
repo = 'chr4/nginx.vim'

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_post_source = '''
inoremap <C-f> <C-r>=lexima#insmode#leave(1, '<LT>C-G>U<LT>RIGHT>')<CR>
'''

# show diff
[[plugins]]
repo = 'airblade/vim-gitgutter'

# vim git
[[plugins]]
repo = 'cohama/agit.vim'
